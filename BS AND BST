Rhythm, [21-11-2022 09:38 AM]

# Python program to demonstrate delete operation 
# in binary search tree 

  
# A Binary Tree Node 

  

  

class Node: 

  

    # Constructor to create a new node 

    def init(self, key): 

        self.key = key 

        self.left = None

        self.right = None

  

  
# A utility function to do inorder traversal of BST 

def inorder(root): 

    if root is not None: 

        inorder(root.left) 

        print (root.key,end=" ") 

        inorder(root.right) 

  

  
# A utility function to insert a 
# new node with given key in BST 

def insert(node, key): 

  

    # If the tree is empty, return a new node 

    if node is None: 

        return Node(key) 

  

    # Otherwise recur down the tree 

    if key < node.key: 

        node.left = insert(node.left, key) 

    else: 

        node.right = insert(node.right, key) 

  

    # return the (unchanged) node pointer 

    return node 

  
# Given a non-empty binary  
# search tree, return the node 
# with minimum key value  
# found in that tree. Note that the 
# entire tree does not need to be searched 

  

  

def minValueNode(node): 

    current = node 

  

    # loop down to find the leftmost leaf 

    while(current.left is not None): 

        current = current.left 

  

    return current 

  
# Given a binary search tree and a key, this function 
# delete the key and returns the new root 

  

  

def deleteNode(root, key): 

  

    # Base Case 

    if root is None: 

        return root 

  

    # If the key to be deleted  

    # is smaller than the root's 

    # key then it lies in  left subtree 

    if key < root.key: 

        root.left = deleteNode(root.left, key) 

  

    # If the kye to be delete  

    # is greater than the root's key 

    # then it lies in right subtree 

    elif(key > root.key): 

        root.right = deleteNode(root.right, key) 

  

    # If key is same as root's key, then this is the node 

    # to be deleted 

    else: 

  

        # Node with only one child or no child 

        if root.left is None: 

            temp = root.right 

            root = None

            return temp 

  

        elif root.right is None: 

            temp = root.left 

            root = None

            return temp 

  

        # Node with two children:  

        # Get the inorder successor 

        # (smallest in the right subtree) 

        temp = minValueNode(root.right) 

  

        # Copy the inorder successor's  

        # content to this node 

        root.key = temp.key 

  

        # Delete the inorder successor 

        root.right = deleteNode(root.right, temp.key) 

  

    return root 

  

  
# Driver code 
""" Let us create following BST 

              50 

           /     \ 

          30      70 

         /  \    /  \ 

       20   40  60   80 """

  

root = None

root = insert(root, 50) 

root = insert(root, 30) 

root = insert(root, 20) 

root = insert(root, 40) 

root = insert(root, 70) 

root = insert(root, 60) 

root = insert(root, 80) 

  

print ("Inorder traversal of the given tree") 
inorder(root) 

  

print ("\nDelete 20") 

root = deleteNode(root, 20) 

print ("Inorder traversal of the modified tree") 
inorder(root)

Rhythm, [21-11-2022 09:38 AM]
The space complexity of Binary Search Tree Deletion algorithm would be O(n) with 'n' being the depth of the tree since at any point of time maximum number of stack frames that could be present in memory is 'n'.

Rhythm, [21-11-2022 09:38 AM]
#intialize array     
arr = [50, 20, 30, 40, 10];     
temp = 0;    
     
#Displaying elements of original array    
print("Elements of original array: ");    
for i in range(0, len(arr)):    
    print(arr[i], end=" ");    
     
#Sort the array in ascending order    
for i in range(0, len(arr)):    
    for j in range(i+1, len(arr)):    
        if(arr[i] > arr[j]):    
            temp = arr[i];    
            arr[i] = arr[j];    
            arr[j] = temp;    
     
print();    
     
#Displaying elements of the array after sorting    
    
print("\nElements of array sorted in ascending order: ");    
for i in range(0, len(arr)):    
    print(arr[i], end=" ");

# Python program to implement delete operation in a
# sorted array

# /* Function to delete an element */


def deleteElement(arr, n, key):

 # Find position of element to be deleted
 pos = binarySearch(arr, 0, n - 1, key)

 if (pos == -1):
  print("Element not found")
  return n

 # Deleting element
 for i in range(pos, n - 1):
  arr[i] = arr[i + 1]

 return n - 1

# To search a key to be deleted


def binarySearch(arr, low, high, key):

 if (high < low):
  return -1
 mid = (low + high) // 2

 if (key == arr[mid]):
  return mid
 if (key > arr[mid]):
  return binarySearch(arr, (mid + 1), high, key)

 return binarySearch(arr, low, (mid - 1), key)


# Driver code
if name == "main":
 arr = [10, 20, 30, 40, 50]

 n = len(arr)
 key = 30

 print("\n\nArray before deletion")

 for i in range(n):
  print(arr[i], end=" ")

 # Function call
 n = deleteElement(arr, n, key)
 print("\n\nArray after deletion")
 for i in range(n):
  print(arr[i], end=" ")
